// Generated by Swift version 1.1 (swift-600.0.56.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
@import Foundation.NSURLSession;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"


/// Subclass of NSOperation for handling and scheduling HTTPTask on a NSOperationQueue.
SWIFT_CLASS("_TtC9SwiftHTTP13HTTPOperation")
@interface HTTPOperation : NSOperation

/// Controls if the task is finished or not.
@property (nonatomic) BOOL done;

/// Returns if the task is asynchronous or not. This should always be false.
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;

/// Returns if the task has been cancelled or not.
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;

/// Returns if the task is current running.
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;

/// Returns if the task is finished.
@property (nonatomic, readonly, getter=isFinished) BOOL finished;

/// Returns if the task is ready to be run or not.
@property (nonatomic, readonly, getter=isReady) BOOL ready;

/// Starts the task.
- (void)start;

/// Cancels the running task.
- (void)cancel;

/// Sets the task to finished.
- (void)finish;
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Default Serializer for serializing an object to an HTTP request. This applies to form serialization, parameter encoding, etc.
SWIFT_CLASS("_TtC9SwiftHTTP21HTTPRequestSerializer")
@interface HTTPRequestSerializer : NSObject

/// headers for the request.
@property (nonatomic, copy) NSDictionary * headers;

/// encoding for the request.
@property (nonatomic) NSUInteger stringEncoding;

/// Send request if using cellular network or not. Defaults to true.
@property (nonatomic) BOOL allowsCellularAccess;

/// If the request should handle cookies of not. Defaults to true.
@property (nonatomic) BOOL HTTPShouldHandleCookies;

/// If the request should use piplining or not. Defaults to false.
@property (nonatomic) BOOL HTTPShouldUsePipelining;

/// How long the timeout interval is. Defaults to 60 seconds.
@property (nonatomic) NSTimeInterval timeoutInterval;

/// Set the request cache policy. Defaults to UseProtocolCachePolicy.
@property (nonatomic) NSURLRequestCachePolicy cachePolicy;

/// Set the network service. Defaults to NetworkServiceTypeDefault.
@property (nonatomic) NSURLRequestNetworkServiceType networkServiceType;

/// Initializes a new HTTPRequestSerializer Object.
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSURLSession;
@class NSURLSessionTask;


/// Configures NSURLSession Request for HTTPOperation. Also provides convenience methods for easily running HTTP Request.
SWIFT_CLASS("_TtC9SwiftHTTP8HTTPTask")
@interface HTTPTask : NSObject <NSURLSessionDelegate, NSURLSessionTaskDelegate>
@property (nonatomic, copy) NSString * baseURL;
@property (nonatomic) HTTPRequestSerializer * requestSerializer;
@property (nonatomic, copy) NSURLCredential * (^ auth)(NSURLAuthenticationChallenge *);

/// A newly minted HTTPTask for your enjoyment.
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Method for authentication challenge.
- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler;
@end

@class NSURL;
@class NSData;


/// Object representation of a HTTP File Upload.
SWIFT_CLASS("_TtC9SwiftHTTP10HTTPUpload")
@interface HTTPUpload : NSObject

/// Initializes a new HTTPUpload Object.
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Initializes a new HTTPUpload Object with a fileUrl. The fileName and mimeType will be infered.
///
/// \param fileUrl The fileUrl is a standard url path to a file.
- (instancetype)initWithFileUrl:(NSURL *)fileUrl;

/// <blockquote><p>Initializes a new HTTPUpload Object with a data blob of a file. The fileName and mimeType will be infered if none are provided.</p><blockquote><dl><dt>param</dt><dd><p>data The data is a NSData representation of a file's data.</p></dd><dt>param</dt><dd><p>fileName The fileName is just that. The file's name.</p></dd><dt>param</dt><dd><p>mimeType The mimeType is just that. The mime type you would like the file to uploaded as.</p></dd></dl></blockquote></blockquote>
/// upload a file from a a data blob. Must add a filename and mimeType as that can't be infered from the data
- (instancetype)initWithData:(NSData *)data fileName:(NSString *)fileName mimeType:(NSString *)mimeType;
@end



/// JSON Serializer for serializing an object to an HTTP request. Same as HTTPRequestSerializer, expect instead of HTTP form encoding it does JSON.
SWIFT_CLASS("_TtC9SwiftHTTP21JSONRequestSerializer")
@interface JSONRequestSerializer : HTTPRequestSerializer
- (instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
